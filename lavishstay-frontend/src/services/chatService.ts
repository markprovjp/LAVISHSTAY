import api from '../utils/api';

// --- Type Definitions for API communication ---

/**
 * Expected response from the context API.
 */
interface HotelContextResponse {
  success: boolean;
  context: string;
  message?: string;
}

/**
 * Payload for logging the conversation.
 */
interface LogPayload {
  user_message: string;
  ai_response: string;
  client_token: string;
}

/**
 * Retrieves the client token from localStorage or creates a new one.
 */
export function getClientToken(): string {
  let clientToken = localStorage.getItem("chat_client_token");
  if (!clientToken) {
    clientToken = crypto.randomUUID();
    localStorage.setItem("chat_client_token", clientToken);
  }
  return clientToken;
}

/**
 * NEW: Fetches the hotel context (markdown content) from the backend.
 * @returns {Promise<string>} The markdown content as a string.
 */
export async function getHotelContext(): Promise<string> {
  const { data } = await api.get<HotelContextResponse>('/chat/hotel-context');
  if (data.success) {
    return data.context;
  }
  throw new Error(data.message || 'Failed to fetch hotel context.');
}

/**
 * MODIFIED: Logs the user's message and the AI's response to the backend.
 * @param {string} userMessage - The user's original message.
 * @param {string} aiResponse - The response generated by the AI.
 * @returns {Promise<void>}
 */
export async function logChatMessage(userMessage: string, aiResponse: string): Promise<void> {
  const clientToken = getClientToken();
  const payload: LogPayload = {
    user_message: userMessage,
    ai_response: aiResponse,
    client_token: clientToken,
  };

  await api.post('/chat/log', payload);
}
