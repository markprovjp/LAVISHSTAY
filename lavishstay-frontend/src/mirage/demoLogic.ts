// Demo logic nghi·ªáp v·ª• Room Booking
// Ch·∫°y file n√†y ƒë·ªÉ test logic m·ªõi

import { generateRoomOptions, getUrgencyMessage, calculateDaysDifference } from './roomOptionGenerator';

// Demo data
const roomTypes = ["deluxe", "premium", "suite"] as const;
const basePrice = 1500000; // VND

console.log("=== DEMO LOGIC NGHI·ªÜP V·ª§ ROOM BOOKING ===\n");

// Test case 1: ƒê·∫∑t ph√≤ng h√¥m nay (same day)
console.log("üî• TEST CASE 1: ƒê·∫∑t ph√≤ng h√¥m nay");
const today = new Date().toISOString().split('T')[0];
console.log(`Ng√†y check-in: ${today} (h√¥m nay)`);
console.log(`S·ªë ng√†y ch√™nh l·ªách: ${calculateDaysDifference(today)}`);
console.log("Urgency message:", getUrgencyMessage(today));

const todayOptions = generateRoomOptions("deluxe", today, basePrice);
console.log(`S·ªë l∆∞·ª£ng options: ${todayOptions.length}`);
todayOptions.forEach((option, index) => {
    console.log(`  ${index + 1}. ${option.name} - ${option.pricePerNight.vnd.toLocaleString()} VND`);
    console.log(`     H·ªßy: ${option.cancellationPolicy.description}`);
    console.log(`     Thanh to√°n: ${option.paymentPolicy.description}`);
});
console.log("\n" + "=".repeat(50) + "\n");

// Test case 2: ƒê·∫∑t ph√≤ng ng√†y mai  
console.log("‚ö° TEST CASE 2: ƒê·∫∑t ph√≤ng ng√†y mai");
const tomorrow = new Date();
tomorrow.setDate(tomorrow.getDate() + 1);
const tomorrowStr = tomorrow.toISOString().split('T')[0];
console.log(`Ng√†y check-in: ${tomorrowStr} (ng√†y mai)`);
console.log(`S·ªë ng√†y ch√™nh l·ªách: ${calculateDaysDifference(tomorrowStr)}`);
console.log("Urgency message:", getUrgencyMessage(tomorrowStr));

const tomorrowOptions = generateRoomOptions("deluxe", tomorrowStr, basePrice);
console.log(`S·ªë l∆∞·ª£ng options: ${tomorrowOptions.length}`);
tomorrowOptions.forEach((option, index) => {
    console.log(`  ${index + 1}. ${option.name} - ${option.pricePerNight.vnd.toLocaleString()} VND`);
    console.log(`     H·ªßy: ${option.cancellationPolicy.description}`);
    console.log(`     Thanh to√°n: ${option.paymentPolicy.description}`);
});
console.log("\n" + "=".repeat(50) + "\n");

// Test case 3: ƒê·∫∑t ph√≤ng 3 ng√†y sau (advance booking)
console.log("‚ú® TEST CASE 3: ƒê·∫∑t ph√≤ng 3 ng√†y sau");
const future = new Date();
future.setDate(future.getDate() + 3);
const futureStr = future.toISOString().split('T')[0];
console.log(`Ng√†y check-in: ${futureStr} (3 ng√†y sau)`);
console.log(`S·ªë ng√†y ch√™nh l·ªách: ${calculateDaysDifference(futureStr)}`);
console.log("Urgency message:", getUrgencyMessage(futureStr) || "Kh√¥ng c√≥ th√¥ng b√°o kh·∫©n c·∫•p");

const futureOptions = generateRoomOptions("deluxe", futureStr, basePrice);
console.log(`S·ªë l∆∞·ª£ng options: ${futureOptions.length}`);
futureOptions.forEach((option, index) => {
    console.log(`  ${index + 1}. ${option.name} - ${option.pricePerNight.vnd.toLocaleString()} VND`);
    console.log(`     H·ªßy: ${option.cancellationPolicy.description}`);
    console.log(`     Thanh to√°n: ${option.paymentPolicy.description}`);
    console.log(`     B·ªØa s√°ng: ${option.mealOptions.breakfast?.included ? 'Bao g·ªìm' : 'Kh√¥ng bao g·ªìm'}`);
});
console.log("\n" + "=".repeat(50) + "\n");

// Test case 4: ƒê·∫∑t ph√≤ng 1 tu·∫ßn sau
console.log("üåü TEST CASE 4: ƒê·∫∑t ph√≤ng 1 tu·∫ßn sau");
const nextWeek = new Date();
nextWeek.setDate(nextWeek.getDate() + 7);
const nextWeekStr = nextWeek.toISOString().split('T')[0];
console.log(`Ng√†y check-in: ${nextWeekStr} (1 tu·∫ßn sau)`);
console.log(`S·ªë ng√†y ch√™nh l·ªách: ${calculateDaysDifference(nextWeekStr)}`);
console.log("Urgency message:", getUrgencyMessage(nextWeekStr) || "Kh√¥ng c√≥ th√¥ng b√°o kh·∫©n c·∫•p");

const weekOptions = generateRoomOptions("premium", nextWeekStr, basePrice * 1.2);
console.log(`S·ªë l∆∞·ª£ng options: ${weekOptions.length}`);
weekOptions.forEach((option, index) => {
    console.log(`  ${index + 1}. ${option.name} - ${option.pricePerNight.vnd.toLocaleString()} VND`);
    console.log(`     H·ªßy: ${option.cancellationPolicy.description}`);
    console.log(`     Thanh to√°n: ${option.paymentPolicy.description}`);
    console.log(`     B·ªØa s√°ng: ${option.mealOptions.breakfast?.included ? 'Bao g·ªìm' : 'Kh√¥ng bao g·ªìm'}`);
    if (option.mostPopular) console.log("     üèÜ PH·ªî BI·∫æN NH·∫§T");
});

console.log("\n" + "=".repeat(60));
console.log("üìä T·ªîNG K·∫æT LOGIC NGHI·ªÜP V·ª§:");
console.log("- ƒê·∫∑t ph√≤ng c√πng ng√†y/ng√†y mai: CH·ªà C√ì 1 OPTION kh√¥ng ho√†n ti·ªÅn");
console.log("- ƒê·∫∑t ph√≤ng tr∆∞·ªõc >= 2 ng√†y: C√ì 3 OPTIONS linh ho·∫°t");
console.log("  + Option 1: H·ªßy mi·ªÖn ph√≠ (gi√° cao +15%)");
console.log("  + Option 2: Kh√¥ng ho√†n ti·ªÅn (gi√° r·∫ª -15%)");
console.log("  + Option 3: Bao g·ªìm b·ªØa s√°ng + h·ªßy mi·ªÖn ph√≠ (gi√° cao +30%)");
console.log("- T·∫•t c·∫£ ƒë·ªÅu: THANH TO√ÅN T·∫†I KH√ÅCH S·∫†N");
console.log("=".repeat(60));
