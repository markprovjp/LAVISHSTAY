import React, { useState } from 'react';
import { Card, Steps, Alert, Typography, Collapse } from 'antd';
import { InfoCircleOutlined, CheckCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';

const { Text, Paragraph, Title } = Typography;
const { Panel } = Collapse;

const GoogleOAuthSetupGuide: React.FC = () => {
    const [currentStep, setCurrentStep] = useState(0);

    const clientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;
    const currentOrigin = window.location.origin;

    const setupSteps = [
        {
            title: 'Ki·ªÉm tra Google Console Project',
            description: 'ƒê·∫£m b·∫£o project ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c·∫•u h√¨nh ƒë√∫ng',
            content: (
                <div>
                    <Paragraph>
                        1. Truy c·∫≠p <a href="https://console.cloud.google.com/" target="_blank" rel="noopener noreferrer">Google Cloud Console</a>
                    </Paragraph>
                    <Paragraph>
                        2. T·∫°o ho·∫∑c ch·ªçn project
                    </Paragraph>
                    <Paragraph>
                        3. Enable Google+ API v√† Google OAuth2 API
                    </Paragraph>
                </div>
            )
        },
        {
            title: 'C·∫•u h√¨nh OAuth Consent Screen',
            description: 'Thi·∫øt l·∫≠p th√¥ng tin hi·ªÉn th·ªã cho user khi ƒëƒÉng nh·∫≠p',
            content: (
                <div>
                    <Paragraph>
                        1. V√†o "APIs & Services" ‚Üí "OAuth consent screen"
                    </Paragraph>
                    <Paragraph>
                        2. Ch·ªçn "External" n·∫øu app ch∆∞a verify, "Internal" n·∫øu trong t·ªï ch·ª©c
                    </Paragraph>
                    <Paragraph>
                        3. ƒêi·ªÅn th√¥ng tin app name, user support email, developer email
                    </Paragraph>
                    <Paragraph>
                        4. Th√™m scopes: email, profile, openid
                    </Paragraph>
                </div>
            )
        },
        {
            title: 'T·∫°o OAuth 2.0 Client IDs',
            description: 'T·∫°o credentials cho web application',
            content: (
                <div>
                    <Paragraph>
                        1. V√†o "APIs & Services" ‚Üí "Credentials"
                    </Paragraph>
                    <Paragraph>
                        2. Click "Create Credentials" ‚Üí "OAuth 2.0 Client IDs"
                    </Paragraph>
                    <Paragraph>
                        3. Ch·ªçn "Web application"
                    </Paragraph>
                    <Paragraph>
                        4. <strong>Quan tr·ªçng:</strong> Th√™m Authorized JavaScript origins:
                    </Paragraph>
                    <ul>
                        <li><Text code>http://localhost:3000</Text></li>
                        <li><Text code>http://localhost:5173</Text></li>
                        <li><Text code>{currentOrigin}</Text> (domain hi·ªán t·∫°i)</li>
                    </ul>
                    <Paragraph>
                        5. <strong>Kh√¥ng c·∫ßn</strong> th√™m Authorized redirect URIs cho popup mode
                    </Paragraph>
                </div>
            )
        },
        {
            title: 'C·∫•u h√¨nh Environment Variables',
            description: 'Thi·∫øt l·∫≠p Client ID trong .env file',
            content: (
                <div>
                    <Paragraph>
                        Th√™m v√†o file <Text code>.env</Text>:
                    </Paragraph>
                    <Text code style={{ display: 'block', padding: '8px', backgroundColor: '#f5f5f5' }}>
                        VITE_GOOGLE_CLIENT_ID=your-client-id.apps.googleusercontent.com
                    </Text>
                    <Paragraph style={{ marginTop: 16 }}>
                        Client ID hi·ªán t·∫°i: <Text code>{clientId || 'Ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh'}</Text>
                    </Paragraph>
                </div>
            )
        }
    ];

    const checkCurrentConfig = () => {
        const issues = [];

        if (!clientId) {
            issues.push('Client ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        } else if (!clientId.endsWith('.apps.googleusercontent.com')) {
            issues.push('Client ID kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
        }

        if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
            issues.push('C·∫ßn s·ª≠ d·ª•ng HTTPS ho·∫∑c localhost');
        }

        if (window.self !== window.top) {
            issues.push('ƒêang ch·∫°y trong iframe (c√≥ th·ªÉ g√¢y v·∫•n ƒë·ªÅ)');
        }

        return issues;
    };

    const issues = checkCurrentConfig();

    return (
        <Card title="üîß Google OAuth Setup Guide" style={{ margin: '16px 0' }}>
            {issues.length > 0 && (
                <Alert
                    type="warning"
                    showIcon
                    icon={<ExclamationCircleOutlined />}
                    message="C·∫•u h√¨nh ch∆∞a ho√†n ch·ªânh"
                    description={
                        <ul>
                            {issues.map((issue, index) => (
                                <li key={index}>{issue}</li>
                            ))}
                        </ul>
                    }
                    style={{ marginBottom: 16 }}
                />
            )}

            {issues.length === 0 && (
                <Alert
                    type="success"
                    showIcon
                    icon={<CheckCircleOutlined />}
                    message="C·∫•u h√¨nh c√≥ v·∫ª ƒë√∫ng!"
                    description="T·∫•t c·∫£ ki·ªÉm tra c∆° b·∫£n ƒë√£ passed. N·∫øu v·∫´n g·∫∑p l·ªói, h√£y ki·ªÉm tra Google Console."
                    style={{ marginBottom: 16 }}
                />
            )}

            <Collapse>
                <Panel header="üìñ H∆∞·ªõng d·∫´n chi ti·∫øt" key="guide">
                    <Steps
                        current={currentStep}
                        direction="vertical"
                        items={setupSteps.map((step, index) => ({
                            title: step.title,
                            description: step.description,
                            icon: currentStep === index ? <InfoCircleOutlined /> : undefined
                        }))}
                        onChange={setCurrentStep}
                    />

                    <Card size="small" style={{ marginTop: 16 }}>
                        <Title level={5}>{setupSteps[currentStep].title}</Title>
                        {setupSteps[currentStep].content}
                    </Card>
                </Panel>

                <Panel header="üêõ Troubleshooting" key="troubleshooting">
                    <div>
                        <Title level={5}>L·ªói "Popup window closed":</Title>
                        <ul>
                            <li>User ƒë√≥ng popup qu√° nhanh ‚Üí Gi·∫£i th√≠ch cho user ƒë·ª£i</li>
                            <li>Popup b·ªã browser block ‚Üí H∆∞·ªõng d·∫´n t·∫Øt popup blocker</li>
                            <li>Domain ch∆∞a ƒë∆∞·ª£c authorize ‚Üí Ki·ªÉm tra Google Console</li>
                        </ul>

                        <Title level={5}>L·ªói "Invalid client":</Title>
                        <ul>
                            <li>Client ID sai ‚Üí Ki·ªÉm tra VITE_GOOGLE_CLIENT_ID</li>
                            <li>Domain kh√¥ng ƒë∆∞·ª£c authorize ‚Üí Th√™m v√†o Authorized JavaScript origins</li>
                        </ul>

                        <Title level={5}>L·ªói "Restricted client":</Title>
                        <ul>
                            <li>App ch∆∞a ƒë∆∞·ª£c verify ‚Üí Th√™m test users ho·∫∑c submit for verification</li>
                            <li>Quota exceeded ‚Üí Ki·ªÉm tra usage limits</li>
                        </ul>
                    </div>
                </Panel>
            </Collapse>
        </Card>
    );
};

export default GoogleOAuthSetupGuide;
