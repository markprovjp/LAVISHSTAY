/**
 * Room Allocation Logic for Smart Room Suggestions
 * T√≠nh to√°n ph√¢n b·ªï ph√≤ng th√¥ng minh - LU√îN HI·ªÇN TH·ªä T·∫§T C·∫¢ PH√íNG
 * Kh√°ch c√≥ th·ªÉ ch·ªçn nhi·ªÅu ph√≤ng ƒë·ªÉ ƒë·ªß s·ªë ng∆∞·ªùi
 */

export interface GuestDetails {
    adults: number;
    children: number;
}

export interface RoomAllocationSuggestion {
    roomType: string;
    suggestedQuantity: number; // S·ªë ph√≤ng g·ª£i √Ω
    maxGuestsPerRoom: number;
    reasonCode: 'PERFECT_FIT' | 'CHILD_FRIENDLY' | 'UPGRADE_OPTION' | 'MULTIPLE_ROOMS_OPTION';
    reason: string;
    priority: number; // 1-5, c√†ng th·∫•p c√†ng ∆∞u ti√™n hi·ªÉn th·ªã l√™n ƒë·∫ßu
    isRecommended: boolean; // C√≥ n√™n highlight kh√¥ng
}

export interface AllocationResult {
    totalGuests: number;
    totalAdults: number;
    totalChildren: number;
    suggestions: RoomAllocationSuggestion[];
    minimumRoomsNeeded: number;
    notes: string[];
}

/**
 * Th√¥ng tin v·ªÅ capacity c·ªßa t·ª´ng lo·∫°i ph√≤ng (theo models.ts)
 */
const ROOM_CAPACITIES = {
    deluxe: { maxGuests: 2, canAddChild: true, basePrice: 1300000 }, // 2 ng∆∞·ªùi l·ªõn + 1 tr·∫ª em
    premium: { maxGuests: 3, canAddChild: false, basePrice: 1400000 }, // 3 ng∆∞·ªùi l·ªõn
    suite: { maxGuests: 4, canAddChild: true, basePrice: 2650000 }, // 4 ng∆∞·ªùi + tr·∫ª em
    theLevelPremium: { maxGuests: 2, canAddChild: true, basePrice: 3200000 }, // 2 ng∆∞·ªùi l·ªõn + 1 tr·∫ª em
    theLevelPremiumCorner: { maxGuests: 3, canAddChild: false, basePrice: 3400000 }, // 3 ng∆∞·ªùi l·ªõn
    theLevelSuite: { maxGuests: 4, canAddChild: true, basePrice: 4600000 }, // 4 ng∆∞·ªùi + tr·∫ª em
    presidential: { maxGuests: 4, canAddChild: true, basePrice: 47000000 } // 4 ng∆∞·ªùi + tr·∫ª em
};

/**
 * T√≠nh to√°n g·ª£i √Ω ph√≤ng th√¥ng minh - LU√îN HI·ªÇN TH·ªä T·∫§T C·∫¢ PH√íNG
 * Logic: Kh√°ch c√≥ th·ªÉ ch·ªçn nhi·ªÅu ph√≤ng ƒë·ªÉ ƒë·ªß s·ªë ng∆∞·ªùi
 */
export function calculateRoomAllocation(guestDetails: GuestDetails): AllocationResult {
    const { adults, children } = guestDetails;
    const totalGuests = adults + children;
    const suggestions: RoomAllocationSuggestion[] = [];
    const notes: string[] = [];

    // T√≠nh s·ªë ph√≤ng t·ªëi thi·ªÉu c·∫ßn (d·ª±a tr√™n s·ªë ng∆∞·ªùi l·ªõn, 2 ng∆∞·ªùi l·ªõn/ph√≤ng)
    const minimumRoomsNeeded = Math.ceil(adults / 2);

    // T·∫°o suggestions cho T·∫§T C·∫¢ lo·∫°i ph√≤ng v·ªõi logic g·ª£i √Ω th√¥ng minh
    Object.entries(ROOM_CAPACITIES).forEach(([roomType, capacity]) => {
        let priority = 5; // Default priority
        let reasonCode: 'PERFECT_FIT' | 'CHILD_FRIENDLY' | 'UPGRADE_OPTION' | 'MULTIPLE_ROOMS_OPTION' = 'UPGRADE_OPTION';
        let reason = '';
        let suggestedQuantity = 1;
        let isRecommended = false;

        // Logic g·ª£i √Ω d·ª±a tr√™n s·ªë kh√°ch v√† lo·∫°i ph√≤ng
        if (roomType === 'deluxe') {
            if (adults <= 2 && children <= 1) {
                priority = 1;
                reasonCode = children > 0 ? 'CHILD_FRIENDLY' : 'PERFECT_FIT';
                reason = children > 0 
                    ? 'Ph√π h·ª£p cho gia ƒë√¨nh c√≥ tr·∫ª em, gi√° t·ªët nh·∫•t' 
                    : 'Ph√π h·ª£p cho 2 ng∆∞·ªùi, gi√° t·ªët nh·∫•t';
                isRecommended = true;
            } else {
                suggestedQuantity = minimumRoomsNeeded;
                reasonCode = 'MULTIPLE_ROOMS_OPTION';
                reason = `G·ª£i √Ω ${suggestedQuantity} ph√≤ng Deluxe cho ${adults} ng∆∞·ªùi`;
                priority = 3;
            }
        }
        
        else if (roomType === 'premium') {
            if (adults === 3 && children === 0) {
                priority = 1;
                reasonCode = 'PERFECT_FIT';
                reason = 'Ph√≤ng Premium ch·ª©a v·ª´a 3 ng∆∞·ªùi l·ªõn';
                isRecommended = true;
            } else if (adults <= 3) {
                priority = 2;
                reasonCode = 'UPGRADE_OPTION';
                reason = 'Ph√≤ng r·ªông r√£i h∆°n cho nh√≥m nh·ªè';
            } else {
                suggestedQuantity = Math.ceil(adults / 3);
                reasonCode = 'MULTIPLE_ROOMS_OPTION';
                reason = `G·ª£i √Ω ${suggestedQuantity} ph√≤ng Premium cho ${adults} ng∆∞·ªùi`;
                priority = 4;
            }
        }

        else if (roomType === 'theLevelPremium') {
            if (adults <= 2 && children <= 1) {
                priority = 2;
                reasonCode = 'UPGRADE_OPTION';
                reason = 'Ph√≤ng The Level cao c·∫•p v·ªõi ti·ªán √≠ch VIP';
                isRecommended = totalGuests <= 3;
            } else {
                suggestedQuantity = minimumRoomsNeeded;
                reasonCode = 'MULTIPLE_ROOMS_OPTION';
                reason = `G·ª£i √Ω ${suggestedQuantity} ph√≤ng The Level Premium`;
                priority = 4;
            }
        }

        else if (roomType === 'theLevelPremiumCorner') {
            if (adults === 3 && children === 0) {
                priority = 2;
                reasonCode = 'UPGRADE_OPTION';
                reason = 'The Level Premium Corner view ƒë·∫πp cho 3 ng∆∞·ªùi';
                isRecommended = true;
            } else if (adults <= 3) {
                priority = 3;
                reasonCode = 'UPGRADE_OPTION';
                reason = 'Ph√≤ng g√≥c v·ªõi view ƒë·∫πp';
            } else {
                suggestedQuantity = Math.ceil(adults / 3);
                reasonCode = 'MULTIPLE_ROOMS_OPTION';
                reason = `G·ª£i √Ω ${suggestedQuantity} ph√≤ng The Level Corner`;
                priority = 5;
            }
        }

        else if (roomType === 'suite' || roomType === 'theLevelSuite') {
            if (adults <= 4) {
                priority = roomType === 'suite' ? 2 : 3;
                reasonCode = totalGuests <= 4 ? 'PERFECT_FIT' : 'UPGRADE_OPTION';
                reason = totalGuests <= 4 
                    ? `${roomType === 'suite' ? 'Suite' : 'The Level Suite'} r·ªông r√£i cho gia ƒë√¨nh l·ªõn`
                    : `${roomType === 'suite' ? 'Suite' : 'The Level Suite'} sang tr·ªçng`;
                isRecommended = totalGuests >= 4;
            } else {
                suggestedQuantity = Math.ceil(adults / 4);
                reasonCode = 'MULTIPLE_ROOMS_OPTION';
                reason = `G·ª£i √Ω ${suggestedQuantity} ${roomType === 'suite' ? 'Suite' : 'The Level Suite'}`;
                priority = 4;
            }
        }

        else if (roomType === 'presidential') {
            if (adults <= 4) {
                priority = 4;
                reasonCode = 'UPGRADE_OPTION';
                reason = 'Presidential Suite - ƒê·∫≥ng c·∫•p t·ªëi th∆∞·ª£ng';
                isRecommended = totalGuests >= 4;
            } else {
                suggestedQuantity = Math.ceil(adults / 4);
                reasonCode = 'MULTIPLE_ROOMS_OPTION';
                reason = `G·ª£i √Ω ${suggestedQuantity} Presidential Suite`;
                priority = 5;
            }
        }

        suggestions.push({
            roomType,
            suggestedQuantity,
            maxGuestsPerRoom: capacity.maxGuests,
            reasonCode,
            reason,
            priority,
            isRecommended
        });
    });

    // Add helpful notes
    if (children > 0) {
        notes.push(`${children} tr·∫ª em c√≥ th·ªÉ ·ªü c√πng ph√≤ng v·ªõi b·ªë m·∫π (kh√¥ng t√≠nh ph√≠)`);
    }
    
    if (adults > 4) {
        notes.push(`V·ªõi ${adults} ng∆∞·ªùi l·ªõn, b·∫°n c·∫ßn ch·ªçn nhi·ªÅu ph√≤ng. H·ªá th·ªëng s·∫Ω ki·ªÉm tra t·ªïng capacity khi ƒë·∫∑t ph√≤ng.`);
    }

    notes.push('üí° B·∫°n c√≥ th·ªÉ ch·ªçn nhi·ªÅu ph√≤ng kh√°c nhau ƒë·ªÉ ƒë·ªß s·ªë ng∆∞·ªùi');
    notes.push('üîí H·ªá th·ªëng s·∫Ω ki·ªÉm tra ƒë·ªß ch·ªó cho t·∫•t c·∫£ kh√°ch tr∆∞·ªõc khi thanh to√°n');

    return {
        totalGuests,
        totalAdults: adults,
        totalChildren: children,
        suggestions: suggestions.sort((a, b) => a.priority - b.priority),
        minimumRoomsNeeded,
        notes
    };
}

/**
 * Ki·ªÉm tra xem m·ªôt lo·∫°i ph√≤ng c√≥ ph√π h·ª£p v·ªõi s·ªë l∆∞·ª£ng kh√°ch kh√¥ng
 * LU√îN RETURN TRUE v√¨ hi·ªÉn th·ªã t·∫•t c·∫£ ph√≤ng
 */
export function isRoomSuitableForGuests(
    roomType: keyof typeof ROOM_CAPACITIES, 
    guestDetails: GuestDetails
): boolean {
    // Logic ƒë·ªÉ tham kh·∫£o, nh∆∞ng lu√¥n return true ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ ph√≤ng
    const capacity = ROOM_CAPACITIES[roomType];
    const { adults, children } = guestDetails;
    
    const totalGuests = adults + children;
    const canAccommodate = capacity.canAddChild ? 
        (adults <= capacity.maxGuests && totalGuests <= capacity.maxGuests + 1) :
        totalGuests <= capacity.maxGuests;
    
    console.log(`Room ${roomType}: capacity=${capacity.maxGuests}, guests=${totalGuests}, suitable=${canAccommodate}`);
    
    return true; // LU√îN hi·ªÉn th·ªã t·∫•t c·∫£ ph√≤ng - kh√°ch c√≥ th·ªÉ ch·ªçn nhi·ªÅu ph√≤ng
}

/**
 * T√≠nh to√°n s·ªë ph√≤ng t·ªëi thi·ªÉu c·∫ßn thi·∫øt
 */
export function calculateMinimumRoomsNeeded(guestDetails: GuestDetails): number {
    const { adults } = guestDetails;
    // Gi·∫£ ƒë·ªãnh t·ªëi ƒëa 2 ng∆∞·ªùi l·ªõn/ph√≤ng cho t√≠nh to√°n an to√†n
    return Math.ceil(adults / 2);
}

/**
 * L·∫•y g·ª£i √Ω t·ªët nh·∫•t cho m·ªôt lo·∫°i ph√≤ng c·ª• th·ªÉ
 */
export function getBestSuggestionForRoomType(
    roomType: string, 
    guestDetails: GuestDetails
): RoomAllocationSuggestion | null {
    const allocation = calculateRoomAllocation(guestDetails);
    return allocation.suggestions.find(s => s.roomType === roomType) || null;
}

/**
 * Format th√¥ng tin v·ªÅ capacity c·ªßa ph√≤ng
 */
export function formatRoomCapacityInfo(
    roomType: keyof typeof ROOM_CAPACITIES,
    guestDetails: GuestDetails
): string {
    const capacity = ROOM_CAPACITIES[roomType];
    const suggestion = getBestSuggestionForRoomType(roomType, guestDetails);
    
    if (suggestion && suggestion.suggestedQuantity > 1) {
        return `G·ª£i √Ω ${suggestion.suggestedQuantity} ph√≤ng √ó ${capacity.maxGuests} kh√°ch/ph√≤ng`;
    }
    
    return `T·ªëi ƒëa ${capacity.maxGuests} kh√°ch${capacity.canAddChild ? ' (+ tr·∫ª em)' : ''}`;
}

/**
 * Validation: Ki·ªÉm tra xem t·ªïng s·ªë ph√≤ng ƒë√£ ch·ªçn c√≥ ƒë·ªß ch·ªó cho t·∫•t c·∫£ kh√°ch kh√¥ng
 */
export function validateRoomSelection(
    selectedRooms: { [roomId: string]: { [optionId: string]: number } },
    roomsData: any[],
    guestDetails: GuestDetails
): { 
    isValid: boolean; 
    totalCapacity: number; 
    message: string;
    missingCapacity?: number;
} {
    const { adults, children } = guestDetails;
    const totalGuests = adults + children;
    let totalCapacity = 0;

    // T√≠nh t·ªïng capacity c·ªßa c√°c ph√≤ng ƒë√£ ch·ªçn
    Object.entries(selectedRooms).forEach(([roomId, options]) => {
        const room = roomsData.find(r => r.id.toString() === roomId);
        if (room) {
            Object.entries(options).forEach(([optionId, quantity]) => {
                const option = room.options.find((opt: any) => opt.id === optionId);
                if (option && quantity > 0) {
                    totalCapacity += option.maxGuests * quantity;
                }
            });
        }
    });

    const isValid = totalCapacity >= totalGuests;
    const missingCapacity = isValid ? 0 : totalGuests - totalCapacity;

    return {
        isValid,
        totalCapacity,
        message: isValid 
            ? `‚úÖ ƒê·ªß ch·ªó cho ${totalGuests} kh√°ch (${totalCapacity} ch·ªó)` 
            : `‚ùå Thi·∫øu ${missingCapacity} ch·ªó (c√≥ ${totalCapacity}/${totalGuests} ch·ªó)`,
        missingCapacity: isValid ? undefined : missingCapacity
    };
}
