Nguyên nhân phổ biến:
Render lại toàn bộ grid/phòng khi state thay đổi (ví dụ: chọn phòng, xem chi tiết).
Không tối ưu memoization, không dùng virtualization.
Component RoomCard/RoomGridView không memo hóa, không tách nhỏ, không dùng PureComponent.
Checkbox dùng Antd mặc định, không tối ưu cho số lượng lớn.
API trả về quá nhiều dữ liệu, không phân trang/lazy load.
Giải pháp tối ưu hóa hiệu năng
1. Dùng Virtual List/Grid cho phòng
Ant Design Pro có ProList và Ant Design có List hỗ trợ virtualization.
Hoặc dùng react-window cho grid lớn.

Ví dụ dùng ProList:

import { ProList } from '@ant-design/pro-components';

<ProList
  dataSource={filteredRoomsToDisplay}
  rowKey="id"
  pagination={{
    pageSize: 20,
  }}
  renderItem={(item) => (
    <ProList.Item
      title={item.name}
      subTitle={item.room_type?.name}
      actions={[
        <ProFormCheckbox
          checked={selectedRooms.has(item.id)}
          onChange={e => handleRoomSelect(item.id, e.target.checked)}
        >
          Chọn
        </ProFormCheckbox>,
        <Button icon={<EyeOutlined />} onClick={() => onViewDetails(item.id)}>Chi tiết</Button>,
      ]}
      extra={<Tag color="blue">{item.status}</Tag>}
    />
  )}
/>
2. Memo hóa RoomCard, RoomGridView
Đã dùng memo, nhưng nên dùng thêm useCallback cho các hàm truyền xuống.
Đảm bảo props không thay đổi không cần thiết.
3. Chuyển Checkbox sang ProFormCheckbox
Thay Checkbox của Antd bằng ProFormCheckbox của Ant Design Pro, tối ưu cho form/grid lớn.

Ví dụ:import { ProFormCheckbox } from '@ant-design/pro-components';

<ProFormCheckbox
  checked={isSelected}
  onChange={e => onRoomSelect(room.id, e.target.checked)}
  style={{ position: 'absolute', top: 8, right: 8, zIndex: 10 }}
>
  Chọn
</ProFormCheckbox>
2. Memo hóa RoomCard, RoomGridView
Đã dùng memo, nhưng nên dùng thêm useCallback cho các hàm truyền xuống.
Đảm bảo props không thay đổi không cần thiết.
3. Chuyển Checkbox sang ProFormCheckbox
Thay Checkbox của Antd bằng ProFormCheckbox của Ant Design Pro, tối ưu cho form/grid lớn.import { ProFormCheckbox } from '@ant-design/pro-components';

<ProFormCheckbox
  checked={isSelected}
  onChange={e => onRoomSelect(room.id, e.target.checked)}
  style={{ position: 'absolute', top: 8, right: 8, zIndex: 10 }}
>
  Chọn
</ProFormCheckbox>
4. Phân trang/Lazy load phòng
Nếu API trả về quá nhiều phòng, hãy phân trang hoặc lazy load theo tầng/phân loại.

5. Tối ưu API
Nếu dùng umi-request, hãy kiểm tra API có trả về dữ liệu dư thừa không.
Chỉ lấy các trường cần thiết cho grid, chi tiết phòng chỉ lấy khi click.
6. Tối ưu state
Tránh lưu toàn bộ phòng vào state nếu không cần thiết.
Chỉ lưu selectedRooms dưới dạng Set hoặc Map.
Tóm tắt giải pháp
Dùng ProList hoặc react-window cho grid lớn.
Chuyển Checkbox sang ProFormCheckbox.
Memo hóa các component và callback.
Phân trang/lazy load nếu phòng quá nhiều.
Tối ưu API, chỉ lấy dữ liệu cần thiết.